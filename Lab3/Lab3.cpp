// Lab3.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <iostream>
#include "cmath"

//Операторы цикла и условного перехода

int main()
{
	int a = 10, b = 15, c = 15;
	if (c == b /*=true*/) // == - лог.оператор равно,
		// возвращает true только если оба операнда верны
		// != лог.оператор не равно проверяющий неравенство
		//операндов возвращает true если операнды НЕ равны
	{
		std::cout << "a == b" << std::endl; // a равно б

	}
	else
	{
		std::cout << " a != b" << std::endl; // a не равно б
	}


	//тернарный оператор (лог_усл ) ? (операторы если true,операторы если true ) : (операторы если false)
	// также запись можно переносить на несколько строк
	(c == b) ?
		(std::cout << "c== b" << std::endl)
		:
		(std::cout << "a !=b " << std::endl);


	int d = -10;
	// пример с проверкой дескриминанта 
	if (d == 0)
	{
		std::cout << "d==0" << std::endl;
	}
	else if (d > 0)
	{
		std::cout << "d > 0" << std::endl;
	}
	else  // d<0
	{
		std::cout << "d < 0" << std::endl;
	};




	(d == 0) ? (std::cout << "d==0" << std::endl)
		:
		((d > 0) ?

		(std::cout << "d > 0" << std::endl) :
			(std::cout << "d < 0" << std::endl)
			);

	//switch- оператор условного перехода с несколькими вариантами
   /* switch (выражение 1)
   {
   case (выражение 2):
   { //  действия, выполняемые если выражение 2 == выражение 1
   break;
   }
   case выражение 3 :
   { //действия, выполняемые если выражение 3 == выражение 1
   break;
   }
   default:
   { // действия, выполняемые, если ни одно выражение не подошло
   break;
	}
   }

   */
	std::cout << std::endl;
	int page_number = 4; //0- стартовая страница
	// 1 - страница сообщений
	// 2 - страница новостей
	// 3 - страница настроек
	// 4 - кнопка выхода
	//6 - кнопка сохранения
	switch (page_number) {
	case 0: // блок операторов можно писать без скобок
		std::cout << "start page" << std::endl;
		break;
	case 1: // блок операторов можно писать без скобок
		std::cout << "Message page" << std::endl;
		break;
	case 2: // блок операторов можно писать без скобок
		std::cout << "News page" << std::endl;
		break;
	case 3: // блок операторов можно писать без скобок
		std::cout << "Settings page" << std::endl;
		break;
	case 4:  // для выхода
		std::cout << "Exit button" << std::endl;
	case 6: // для выхода ! неудачный пример
		std::cout << "Savebutton" << std::endl;
	case 5:
		std::cout << "DATASAVE" << std::endl;
		break;

	default:
		std::cout << "Some another page" << std::endl; //действия, выполняемы, если ни одно выражение не верно
		break;
	}
	// switch целесообразно применять если число вариантов 3..5
	// если вариантов больше, их следует задавать таблицей (массивом)
	// и проверять таблицу на совпадение


	//for- оператор цикла со счетчиком 
	// for (целочисл_переменная; условные_продолженрия; повторяемое действие)
	// {
	// действия, повторяемые, пока (условие+продолжения == true)
	// }
	//
	std::cout << std::endl;

	// типичный случай : задают целую переменную-счетчик int i;
	// задают макс.значение (i<10);
	// задают возрастание/уменьшение I (i++)
	int arr[] = { 1, 10, 2, 4,6,2, 6 };
	for (int i = 0; i < 7; i++)
	{
		std::cout << "arr[i] = " << arr[i] << std::endl;
		// действия, повторяемые, пока i<10 
	}
	// ниже приведен равносильный оператор с пустыми круглыим скобками 
	int k = 0;
	for (;;)
	{
		
		if (k>=7)
		{
			break;
		}

		std::cout << "arr[k] = " << arr[k] << std::endl;
		k++;
	}
	std::cout << std::endl;
	for (int i = 0, j=5; // через запятую можно перечислить сколь угодно операторов
		i+j<10, j<10; //???
		i++, j=j+2, std::cout << "i=" << i << '\t' << "j= " << j << std::endl )
	{
		// действия, повторяемые пока i+j<10
	}
	int m = 15;
	for (int i = 0; i < 10; i++)
	{
		int l = 20;
		std::cout << "i= " << i << std::endl;
		std::cout << "m= " << m << std::endl;
		std::cout << "l= " << l << std::endl;
		l++;
		m--;
		// действия, повторяемые, пока  i< 10
	}
	//std::cout << "i = " << i << std::endl; //переменная цикла снаружи не видна (исчезает)
	std::cout << "m = " << m << std::endl;
	//std::cout << "l = " << l << std::endl; //переменная цикла снаружи не видна (исчезает)
	
	//переменные, объявленные в фигурных и курглых скобках скобках цикла видны только внутри цикла
	//как только цикл закрывается, закрывается переменная и ее содержимое недоступно
	//кроме того, переменные, объявленные в фигурных скобках, перезаписываются каждую итерацию
	// то же самое относится и к другим блокам кода. Если переменная объявляется внутри блока кода, то она видна только внутри блока кода

	std::cout << std::endl;
	
	//while (условие) - действия выполняются до тех пор, пока условие == true
	//условие проверяется ПЕРЕД каждым заходом в цикл
	//{

//	}
	int rnd = 0.0;
	srand(100); // инициализация генератора случайных чисел
	// RAND_MAX - константа, максимально возможное случайное число, возвращаемо rand()
	while (rnd < RAND_MAX * 3/4)
	{
		rnd = rand(); // случайные числа, однородно распределенные от 0 до RAND_MAX
		std::cout << "rnd = " << rnd << std::endl;
		// оператор break тоже работает с while
	}
	//while - цикл  с пред условием, проверка перед началом цикла
	//do 
	//{

	//}
	// while ()
	//do- while - цикл с постусловием, проверка условия после выполнения тела цикла
	std::cout << std::endl;
	int l = 0;
	while (l < 100)
	{
		if (l == 5)
		{
			l++; //если перед следующей итерацией счетчик не увеличить - будет бесконечный цикл
				continue;
		}
		if (l >= 10) {
			break;
		}
		std::cout << "l= " << l << std::endl;
		l++;
	}
	getchar();
    return 0;

}

